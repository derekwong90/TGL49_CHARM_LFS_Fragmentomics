scale_fill_manual(values = c("A/T" = "#FC766AFF", "G/C" = "#5B84B1FF")) +
xlab("Tetranucleotide") +
ylab("Position") +
labs(fill = "") +
theme +
theme(legend.position = c(0.9, 2.75),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
plot.margin = unit(c(-1,0.5,0.5,0.5), "lines")) +
scale_x_discrete(drop = TRUE)
fig_motif
figure <- fig_fold/fig_motif + plot_layout(heights = c(2,1))
figure
fig_motif <- ggplot(data_motif_dna, aes(bin, variable, fill = value)) +
geom_tile() +
facet_grid(~sum, scales = "free_x", space = "free_x", drop = TRUE) +
scale_fill_manual(values = c("A/T" = "#FC766AFF", "G/C" = "#5B84B1FF")) +
xlab("Tetranucleotide") +
ylab("Position") +
labs(fill = "") +
theme +
theme(legend.position = c(0.9, 2.9),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
plot.margin = unit(c(-1,0.5,0.5,0.5), "lines")) +
scale_x_discrete(drop = TRUE)
fig_motif
figure <- fig_fold/fig_motif + plot_layout(heights = c(2,1))
figure
ggsave(file.path(outdir, "fragment_end_contexts_dnase1l3_change_hom.pdf"), figure, width = 5.75, height = 5)
### Plot fold changes (het)
fig_fold <- ggplot(data_melt_het) +
geom_point(aes(motif, value, color = variable), pch = 16, alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", size = 0.5) +
facet_grid(~sum2, scales = "free_x", space = "free_x") +
xlab("") +
ylab("Log2(Fold Change)") +
labs(color = "", fill = "") +
scale_color_manual(name = " ", values =c("#1F78B4", "#33A02C", "#E31A1C")) +
ggtitle("5' Fragment End Motifs") +
theme +
theme(legend.position = c(0.52, 0.3),
legend.title = element_blank(),
legend.box.background = element_rect(colour = "black"),
legend.margin = margin(c(-1,2,1,1)),
legend.background = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
fig_fold
fig_motif <- ggplot(data_motif_het, aes(bin, variable, fill = value)) +
geom_tile() +
facet_grid(~sum, scales = "free_x", space = "free_x", drop = TRUE) +
scale_fill_manual(values = c("A/T" = "#FC766AFF", "G/C" = "#5B84B1FF")) +
xlab("Tetranucleotide") +
ylab("Position") +
labs(fill = "") +
theme +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
plot.margin = unit(c(-1,0.5,0.5,0.5), "lines")) +
scale_x_discrete(drop = TRUE)
fig_motif <- ggplot(data_motif_het, aes(bin, variable, fill = value)) +
geom_tile() +
facet_grid(~sum, scales = "free_x", space = "free_x", drop = TRUE) +
scale_fill_manual(values = c("A/T" = "#FC766AFF", "G/C" = "#5B84B1FF")) +
xlab("Tetranucleotide") +
ylab("Position") +
labs(fill = "") +
theme +
theme(legend.position = c(0.9, 1.75),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
plot.margin = unit(c(-1,0.5,0.5,0.5), "lines")) +
scale_x_discrete(drop = TRUE)
fig_motif
figure <- fig_fold/fig_motif + plot_layout(heights = c(2,1))
figure
ggsave(file.path(outdir, "fragment_end_contexts_dnase1l3_change_het.pdf"), figure, width = 5.75, height = 5)
library(caret)
library(dplyr)
library(tidyverse)
library(pROC)
### Set variables
path <- "/Users/derekwong/OneDrive - UHN/Post-Doc/CHARM_Project/LFS"
healthy <- "/Users/derekwong/OneDrive - UHN/Post-Doc/Healthy_control_cohorts/CHARM_HBC"
outdir <- "/Volumes/GoogleDrive/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization"
title <- "ratio"
title2 <- "Fragment Ratio"
### Import data (Starting with the 5Mb ratios)
data_samples <- read.delim(file.path(path, "samples/sample_list.txt"))
data <- read.delim(file.path(path, "fragmentomics", "CHARM_LFS_ratio_5Mb.txt"))
normal <- read.delim(file.path(healthy, "fragmentomics", "TGL49_HBC_ratio_5Mb.txt"))
### Remove failed samples
exclude <- c("TGL49_0025_Cf_U_PE_321_WG", "TGL49_0209_Cf_U_PE_373_WG")
data_samples <- data_samples[!(data_samples$sWGS %in% exclude), ]
data_samples <- data_samples[data_samples$sWGS %in% colnames(data), ]
samples_neg <- data_samples[data_samples$cancer_status == "negative",]
samples_pos <- data_samples[data_samples$cancer_status == "positive", ]
### Format table for classifier
row.names(data) <- paste0(data$seqnames, "_", data$start)
data <- data[, data_samples$sWGS]
data <- as.data.frame(t(data))
row.names(normal) <- paste0(normal$seqnames, "_", normal$start)
normal <- normal[, !(colnames(normal) %in% c("seqnames", "arm", "start", "end"))]
normal <- as.data.frame(t(normal))
### Set theme
scaleFUN <- function(x) sprintf("%.2f", x)
theme <- theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.position = "none",
legend.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
### Set models to run
#Features.CVparam <- trainControl(method = "repeatedcv", number = 10, repeats = 3, verboseIter = TRUE, returnData = FALSE, classProbs = TRUE, savePredictions = FALSE)
classifiers <- c("rf", "glm", "gbm", "svmRadial", "knn")
names <- c("RF", "GLM", "GBM", "SVM", "KNN")
### Run tests (healthy vs LFS)
results <- data.frame(test = c(), kappa = c(), CI = c())
### Run tests (LFS Germline Mutation)
results <- data.frame(test = c(), kappa = c(), CI = c())
### Make table
Data <- data[row.names(data) %in% data_samples$sWGS, ]
View(data_samples)
### Make table
data_samples <- data_samples[!(data_samples$mutation_type == ""), ]
Data <- data[row.names(data) %in% data_samples$sWGS, ]
y <- data_samples$mutation_type
### Make table
data_samples <- data_samples[!(data_samples$mutation_type %in% c("", "1")), ]
Data <- data[row.names(data) %in% data_samples$sWGS, ]
y <- data_samples$mutation_type
y <- factor(y, levels = c("LOF", "Splice", "2", "3", "5"))
### Set variables
class <- classifiers[[k]]
k <- 1
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Volumes/GoogleDrive/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
data_samples$mutation_type <- factor(data_samples$mutation_type, levels = c("LOF", "Splice", "2", "3", "5"),
labels = c("LOF", "Splice", "C2", "C3", "C5"))
Data <- data[row.names(data) %in% data_samples$sWGS, ]
y <- data_samples$mutation_type
y <- factor(y, levels = c("LOF", "Splice", "C2", "C3", "C5"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, kappa = mean, error = margin)
results <- rbind(results, a)
results(Model)
Model
View(Model)
source('~/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/optimization_ratio.R')
### Run classifiers
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/runner.R")
source('~/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/optimization_ratio.R')
source('~/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/optimization_ratio.R')
### Make table
data_samples <- data_samples[!(data_samples$mutation_type %in% c("", "1")), ]
View(data_samples)
### Import data (Starting with the 5Mb ratios)
data_samples <- read.delim(file.path(path, "samples/sample_list.txt"))
data <- read.delim(file.path(path, "fragmentomics", "CHARM_LFS_ratio_5Mb.txt"))
normal <- read.delim(file.path(healthy, "fragmentomics", "TGL49_HBC_ratio_5Mb.txt"))
### Remove failed samples
exclude <- c("TGL49_0025_Cf_U_PE_321_WG", "TGL49_0209_Cf_U_PE_373_WG")
data_samples <- data_samples[!(data_samples$sWGS %in% exclude), ]
data_samples <- data_samples[data_samples$sWGS %in% colnames(data), ]
samples_neg <- data_samples[data_samples$cancer_status == "negative",]
samples_pos <- data_samples[data_samples$cancer_status == "positive", ]
### Format table for classifier
row.names(data) <- paste0(data$seqnames, "_", data$start)
data <- data[, data_samples$sWGS]
data <- as.data.frame(t(data))
row.names(normal) <- paste0(normal$seqnames, "_", normal$start)
normal <- normal[, !(colnames(normal) %in% c("seqnames", "arm", "start", "end"))]
normal <- as.data.frame(t(normal))
### Make table
data_samples <- data_samples[!(data_samples$mutation_type %in% c("", "1")), ]
data_samples$mutation_type <- factor(data_samples$mutation_type, levels = c("LOF", "Splice", "2", "3", "5"),
labels = c("LOF", "Splice", "C2", "C3", "C5"))
Data <- data[row.names(data) %in% data_samples$sWGS, ]
y <- data_samples$mutation_type
y <- factor(y, levels = c("LOF", "Splice", "C2", "C3", "C5"))
for (k in c(1:length(classifiers))){
### Make table
Data <- data[row.names(data) %in% data_samples$sWGS, ]
y <- data_samples$mutation_type
y <- factor(y, levels = c("LOF", "Splice", "C2", "C3", "C5"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, kappa = mean, error = margin)
results <- rbind(results, a)
}
View(results)
### Set variables
path <- "/Users/derekwong/OneDrive - UHN/Post-Doc/CHARM_Project/LFS"
healthy <- "/Users/derekwong/OneDrive - UHN/Post-Doc/Healthy_control_cohorts/CHARM_HBC"
outdir <- "/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization"
title <- "ratio"
title2 <- "Fragment Ratio"
### Import data (Starting with the 5Mb ratios)
data_samples <- read.delim(file.path(path, "samples/sample_list.txt"))
data <- read.delim(file.path(path, "fragmentomics", "CHARM_LFS_ratio_5Mb.txt"))
normal <- read.delim(file.path(healthy, "fragmentomics", "TGL49_HBC_ratio_5Mb.txt"))
### Remove failed samples
exclude <- c("TGL49_0025_Cf_U_PE_321_WG", "TGL49_0209_Cf_U_PE_373_WG")
data_samples <- data_samples[!(data_samples$sWGS %in% exclude), ]
data_samples <- data_samples[data_samples$sWGS %in% colnames(data), ]
samples_neg <- data_samples[data_samples$cancer_status == "negative",]
samples_pos <- data_samples[data_samples$cancer_status == "positive", ]
### Format table for classifier
row.names(data) <- paste0(data$seqnames, "_", data$start)
data <- data[, data_samples$sWGS]
data <- as.data.frame(t(data))
row.names(normal) <- paste0(normal$seqnames, "_", normal$start)
normal <- normal[, !(colnames(normal) %in% c("seqnames", "arm", "start", "end"))]
normal <- as.data.frame(t(normal))
### Set theme
scaleFUN <- function(x) sprintf("%.2f", x)
theme <- theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.position = "none",
legend.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
### Run tests (LFS Germline Mutation)
classifiers <- c("rf", "gbm", "svmRadial", "knn")
names <- c("RF", "GBM", "SVM", "KNN")
results <- data.frame(test = c(), kappa = c(), CI = c())
data_samples <- data_samples[!(data_samples$mutation_type %in% c("", "1")), ]
data_samples$mutation_type <- factor(data_samples$mutation_type, levels = c("LOF", "Splice", "2", "3", "5"),
labels = c("LOF", "Splice", "C2", "C3", "C5"))
for (k in c(1:length(classifiers))){
### Make table
Data <- data[row.names(data) %in% data_samples$sWGS, ]
y <- data_samples$mutation_type
y <- factor(y, levels = c("LOF", "Splice", "C2", "C3", "C5"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, kappa = mean, error = margin)
results <- rbind(results, a)
}
### Run tests (LFS Germline Mutation)
results <- data.frame(test = c(), kappa = c(), CI = c())
data_samples <- data_samples[!(data_samples$mutation_type %in% c("", "1")), ]
data_samples$mutation_type <- factor(data_samples$mutation_type, levels = c("LOF", "Splice", "2", "3", "5"),
labels = c("LOF", "Splice", "C2", "C3", "C5"))
mutations <- unique(data_samples$mutation_type)
samples <- data_samples
### Run tests (LFS Germline Mutation)
results <- data.frame(test = c(), kappa = c(), CI = c())
View(samples)
### Set variables
path <- "/Users/derekwong/OneDrive - UHN/Post-Doc/CHARM_Project/LFS"
healthy <- "/Users/derekwong/OneDrive - UHN/Post-Doc/Healthy_control_cohorts/CHARM_HBC"
outdir <- "/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization"
title <- "ratio"
title2 <- "Fragment Ratio"
### Import data (Starting with the 5Mb ratios)
data_samples <- read.delim(file.path(path, "samples/sample_list.txt"))
data <- read.delim(file.path(path, "fragmentomics", "CHARM_LFS_ratio_5Mb.txt"))
normal <- read.delim(file.path(healthy, "fragmentomics", "TGL49_HBC_ratio_5Mb.txt"))
### Remove failed samples
exclude <- c("TGL49_0025_Cf_U_PE_321_WG", "TGL49_0209_Cf_U_PE_373_WG")
data_samples <- data_samples[!(data_samples$sWGS %in% exclude), ]
data_samples <- data_samples[data_samples$sWGS %in% colnames(data), ]
samples_neg <- data_samples[data_samples$cancer_status == "negative",]
samples_pos <- data_samples[data_samples$cancer_status == "positive", ]
### Format table for classifier
row.names(data) <- paste0(data$seqnames, "_", data$start)
data <- data[, data_samples$sWGS]
data <- as.data.frame(t(data))
row.names(normal) <- paste0(normal$seqnames, "_", normal$start)
normal <- normal[, !(colnames(normal) %in% c("seqnames", "arm", "start", "end"))]
normal <- as.data.frame(t(normal))
### Run tests (LFS Germline Mutation)
results <- data.frame(test = c(), kappa = c(), CI = c())
data_samples <- data_samples[!(data_samples$mutation_type %in% c("", "1")), ]
data_samples$mutation_type <- factor(data_samples$mutation_type, levels = c("LOF", "Splice", "2", "3", "5"),
labels = c("LOF", "Splice", "C2", "C3", "C5"))
mutations <- unique(data_samples$mutation_type)
for (mutation in mutations) {
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
for (k in c(1:length(classifiers))){
### Make table
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, kappa = mean, error = margin)
results <- rbind(results, a)
}
}
### Set theme
scaleFUN <- function(x) sprintf("%.2f", x)
theme <- theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 12),
legend.position = "none",
legend.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
### Set models to run
#Features.CVparam <- trainControl(method = "repeatedcv", number = 10, repeats = 3, verboseIter = TRUE, returnData = FALSE, classProbs = TRUE, savePredictions = FALSE)
classifiers <- c("rf", "glm", "gbm", "svmRadial", "knn")
names <- c("RF", "GLM", "GBM", "SVM", "KNN")
for (mutation in mutations) {
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
for (k in c(1:length(classifiers))){
### Make table
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, kappa = mean, error = margin)
results <- rbind(results, a)
}
}
for (mutation in mutations) {
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
for (k in c(1:length(classifiers))){
### Make table
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, class = mutation, kappa = mean, error = margin)
results <- rbind(results, a)
}
}
View(samples)
View(results)
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
y
table(y)
View(Data)
View(samples)
is.na(Data)
table(is.na(Data))
table(y)
y
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
mutation <- "C3"
mutation <- "C2"
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
table(y)
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
View(results)
mutation <- "C3"
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
table(y)
if(mutation == "C2" & classifier == "gbm") next
if(mutation == "C2" & class == "gbm") next
mutation <- "C2"
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
for (k in c(1:length(classifiers))){
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
if(mutation == "C2" & class == "gbm") next
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, class = mutation, kappa = mean, error = margin)
results <- rbind(results, a)
}
View(results)
### Run tests (LFS Germline Mutation)
results <- data.frame(test = c(), kappa = c(), CI = c())
mutations <- unique(data_samples$mutation_type)
for (mutation in mutations) {
samples <- data_samples
samples$mutation_type <- ifelse(samples$mutation_type == mutation, "positive", "negative")
Data <- data[row.names(data) %in% samples$sWGS, ]
y <- samples$mutation_type
y <- factor(y, levels = c("negative", "positive"))
for (k in c(1:length(classifiers))){
### Set variables
class <- classifiers[[k]]
name <- names[[k]]
if(mutation == "C2" & class == "gbm") next
### Run suite of classifiers
set.seed(123)
source("/Users/derekwong/My Drive/Post-Doc/CHARM/LFS/LFS_fragment/figures/classifier/optimization/classifier_opt.R")
### Get Kappa performance
mean <- mean(kappa)
margin <- qt(0.975, df = length(kappa) - 1)*sd(kappa)/sqrt(length(kappa))
### Apphend to dataframe
a <- data.frame(test = name, class = mutation, kappa = mean, error = margin)
results <- rbind(results, a)
}
}
View(results)
