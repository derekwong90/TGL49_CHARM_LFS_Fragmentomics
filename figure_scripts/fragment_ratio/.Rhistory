geom_boxplot(data=subset(data_prop, ichor == c("positive", "negative")), aes(fill = ichor), outlier.shape = NA) +
geom_jitter(pch = 20, size = 2, alpha = 0.5, width = 0.15) +
geom_text(data = data_stats_ichor, aes(x = ichor, y = 0.03, label = N), size = 4) +
geom_text(data = data_stats_ichor, aes(x = ichor, y = 0.28, label = annot), size = 8) +
xlab("ichorCNA") +
ylab("Proportion under 150bp") +
ggtitle("") +
scale_fill_manual(labels = c("Healthy", "Positive", "Negative"),
values = c("grey", "#fb9a99", "#a6cee3")) +
labs(fill = "") +
theme(plot.title = element_text(hjust = 0.5, face = "bold.italic", size = 20),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none",
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits=c(0, 0.5), expand = c(0,0))
FigD
## Graph Figure 2D
FigD <- ggplot(data_prop, aes(ichor, p_20_150)) +
geom_boxplot(data=subset(data_prop, ichor == c("positive", "negative")), aes(fill = ichor), outlier.shape = NA) +
geom_jitter(pch = 20, size = 2, alpha = 0.5, width = 0.15) +
geom_text(data = data_stats_ichor, aes(x = ichor, y = 0.03, label = N), size = 4) +
geom_text(data = data_stats_ichor, aes(x = ichor, y = 0.28, label = annot), size = 8) +
xlab("ichorCNA") +
ylab("Proportion under 150bp") +
ggtitle("") +
scale_fill_manual(labels = c("Healthy", "Positive", "Negative"),
values = c("grey", "#fb9a99", "#a6cee3")) +
labs(fill = "") +
theme(plot.title = element_text(hjust = 0.5, face = "bold.italic", size = 20),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none",
legend.key = element_rect(fill = "white"),
legend.text = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(limits=c(0, 0.4), expand = c(0,0))
FigD
setwd("/Users/derekwong/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_ratio")
data_ratio <- read.table("ratio_distance.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_samples <- read.table("sample_list.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_ichor <- read.table("CHARM_LFS_ichorCNA.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
## Set sample order and remove low coverage samples
rownames(data_samples) <- data_samples$TGL_ID
data_samples <- data_samples[data_samples$depth >= 0.5, ]
data_samples <- data_samples[order(factor(data_samples$cancer_status, levels = c("Healthy", "positive", "remission", "negative")),
data_samples$cancer_type), ]
## Set chromosomes
data_chr <- data_ratio[, c("seqnames", "arm", "start", "end")]
row.names(data_chr) <- with(data_chr, paste0(seqnames, "_", start))
## Transform values
row.names(data_ratio) <- with(data_ratio, paste0(seqnames, "_", start))
data_ratio <- data_ratio[, colnames(data_ratio) %in% data_samples$TGL_ID]
data_ratio <- data_ratio[, data_samples$TGL_ID]
data_ratio[data_ratio < 3] <- 0
data_ratio[data_ratio >= 3] <- 1
## Seperate normals
sample_normals <- data_samples[data_samples$cancer_status == "Healthy", ]
data_normals <- data_ratio[, colnames(data_ratio) %in% sample_normals$TGL_ID]
data_ratio <- data_ratio[ , !(colnames(data_ratio) %in% sample_normals$TGL_ID)]
rm(sample_normals)
## Set chr order
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
data_chr$arm <- factor(data_chr$arm, levels=armlevels)
data_chr$arm <- factor(data_chr$arm, levels=armlevels,
labels = c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","","10q"," ","11q","  ",
"12q","13q","14q","15q","   ","16q", "    ","17q","     ","18q",
"      ", "       ", "        ", "         ","          ","           "))
## Calculate Bin Frequency
data_freq <- rowSums(data_ratio)/ncol(data_ratio)
## Calculate % Genome
data_ratio <- cbind(data_normals, data_ratio)
data_ratio <- data_ratio[ , rownames(data_samples)]
data_sum <- (colSums(data_ratio)/512)*100
## Format heatmap
data_ratio[data_ratio == 1] <- "pos"
data_ratio[data_ratio == 0] <- "neg"
data_ratio[is.na(data_ratio)] <- "low"
data_ratio <- as.matrix(t(data_ratio))
## Set colours
col <- c("pos" = "#fb9a99", "neg" = "white", "low" = "lightgrey")
col_cancer <- c(Positive = "#fb9a99", Negative = "#a6cee3", Remission = "#FDBF6F", Healthy = "#B2DF8A")
col_type <- c(Breast = "#fb9a99", Prostate = "#a6cee3", Sarcoma = "#FDBF6F", "Ewing Sarcoma" = "#FFFF99",
Osteosarcoma = "#FF7F00", Adrenocortical = "#B2DF8A", Astrocytoma = "#33A02C",
"Phylloides Tumour" = "#E31A1C", Bladder = "#B15928", "Negative" = "lightgrey")
col_somatic <- c(Positive = "#fb9a99", Negative = "#a6cee3", "Not Sequenced" = "lightgrey", "NA" = "white")
col_age <- c(Adult = "#6A3D9A", Pediatric = "#CAB2D6")
col_freq <- colorRamp2(c(0, 0.25, 0.5), c("white", "#fb9a99", "#e31a1c"))
## Set variables
alter_fun = list(
background = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = "white", col = NA)),
pos = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = col["pos"], col = NA)),
neg = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = col["neg"], col = NA)),
low = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = col["low"], col = NA)))
## Set Cancer Status
data_samples$cancer_status <- factor(data_samples$cancer_status, levels = c("Healthy", "positive", "negative", "remission"),
labels = c("Healthy", "Positive", "Negative", "Remission"))
library(circlize)
data_freq
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Oncoplot/Oncoplot.R')
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Oncoplot/Oncoplot.R')
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_proportion/Fragment_proportion.R')
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_proportion/Fragment_proportion.R')
View(data_stats)
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_proportion/Fragment_proportion.R')
# Set working variables
path <- "/Users/derekwong/Desktop/H4H/projects/CHARM/HBOC/WGS_cohort/fragmentomics/output/dist"
library(tidyverse)
library(plyr)
# Set working variables
path <- "/Users/derekwong/Desktop/H4H/projects/CHARM/HBOC/WGS_cohort/fragmentomics/output/dist"
filenames <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
filenames <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
# Set working variables
path <- "/Users/derekwong/Desktop/H4H/projects/CHARM/LFS/fragmentomics/output/dist"
filenames <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
samples <- list.files(path = path, pattern = "*.txt", full.names = FALSE)
samples <- sub("(_WG).*", '\\1', samples)
outdir <- "/Users/derekwong/OneDrive - UHN/Post-Doc/CHARM_Project/LFS/fragmentomics"
# Merge data
rows <- filenames[1]
rows <- read.delim(rows, header = TRUE)
rows <- rows[, 2:5]
View(rows)
# Merge fragment frequencies
datalist <- lapply(filenames, function(x){read.delim(file = x, header = TRUE)[,9]})
data <- do.call(cbind, datalist)
data <- as.data.frame(data)
colnames(data) <- samples
data <- cbind(rows, data)
View(data)
write.table(data, file.path(outdir, paste0(project, "_fragment_ratios.txt")), row.names = FALSE, sep = "\t")
project <- "CHARM_LFS"
write.table(data, file.path(outdir, paste0(project, "_fragment_ratios.txt")), row.names = FALSE, sep = "\t")
data_ratio <- read.table("CHARM_LFS_fragment_ratios.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
setwd("/Users/derekwong/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_ratio")
library(ComplexHeatmap)
library(dplyr)
library(circlize)
setwd("/Users/derekwong/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_ratio")
data_ratio <- read.table("CHARM_LFS_fragment_ratios.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_healthy <- read.table("NF1_healthy_plasmas_dist.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_samples <- read.table("sample_list.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_ichor <- read.table("CHARM_LFS_ichorCNA.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(data_healthy)
data_ratio <- merge(data_ratio, data_healthy, by=c("seqnames", "arm", "start", "end"))
View(data_ratio)
data_ratio <- read.table("CHARM_LFS_fragment_ratios.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_healthy <- read.table("NF1_healthy_plasmas_dist.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_samples <- read.table("sample_list.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_ichor <- read.table("CHARM_LFS_ichorCNA.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_ratio <- data_ratio %>% right_join(data_healthy, by=c("seqnames", "arm", "start", "end"))
View(data_ratio)
## Set sample order and remove low coverage samples
rownames(data_samples) <- data_samples$TGL_ID
data_samples <- data_samples[data_samples$depth >= 0.5, ]
data_samples <- data_samples[order(factor(data_samples$cancer_status, levels = c("Healthy", "positive", "remission", "negative")),
data_samples$cancer_type), ]
## Set chromosomes
data_chr <- data_ratio[, c("seqnames", "arm", "start", "end")]
row.names(data_chr) <- with(data_chr, paste0(seqnames, "_", start))
## Transform values
row.names(data_ratio) <- with(data_ratio, paste0(seqnames, "_", start))
data_ratio <- data_ratio[, colnames(data_ratio) %in% data_samples$TGL_ID]
data_ratio <- data_ratio[, data_samples$TGL_ID]
data_ratio[data_ratio < 3] <- 0
data_ratio[data_ratio >= 3] <- 1
## Seperate normals
sample_normals <- data_samples[data_samples$cancer_status == "Healthy", ]
data_normals <- data_ratio[, colnames(data_ratio) %in% sample_normals$TGL_ID]
data_ratio <- data_ratio[ , !(colnames(data_ratio) %in% sample_normals$TGL_ID)]
rm(sample_normals)
## Set chr order
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
data_chr$arm <- factor(data_chr$arm, levels=armlevels)
data_chr$arm <- factor(data_chr$arm, levels=armlevels,
labels = c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","","10q"," ","11q","  ",
"12q","13q","14q","15q","   ","16q", "    ","17q","     ","18q",
"      ", "       ", "        ", "         ","          ","           "))
## Calculate Bin Frequency
data_freq <- rowSums(data_ratio)/ncol(data_ratio)
## Calculate % Genome
data_ratio <- cbind(data_normals, data_ratio)
data_ratio <- data_ratio[ , rownames(data_samples)]
data_sum <- (colSums(data_ratio)/512)*100
## Format heatmap
data_ratio[data_ratio == 1] <- "pos"
data_ratio[data_ratio == 0] <- "neg"
data_ratio[is.na(data_ratio)] <- "low"
data_ratio <- as.matrix(t(data_ratio))
## Set colours
col <- c("pos" = "#fb9a99", "neg" = "white", "low" = "lightgrey")
col_cancer <- c(Positive = "#fb9a99", Negative = "#a6cee3", Remission = "#FDBF6F", Healthy = "#B2DF8A")
col_type <- c(Breast = "#fb9a99", Prostate = "#a6cee3", Sarcoma = "#FDBF6F", "Ewing Sarcoma" = "#FFFF99",
Osteosarcoma = "#FF7F00", Adrenocortical = "#B2DF8A", Astrocytoma = "#33A02C",
"Phylloides Tumour" = "#E31A1C", Bladder = "#B15928", "Negative" = "lightgrey")
col_somatic <- c(Positive = "#fb9a99", Negative = "#a6cee3", "Not Sequenced" = "lightgrey", "NA" = "white")
col_age <- c(Adult = "#6A3D9A", Pediatric = "#CAB2D6")
col_freq <- colorRamp2(c(0, 0.25, 0.5), c("white", "#fb9a99", "#e31a1c"))
## Set variables
alter_fun = list(
background = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = "white", col = NA)),
pos = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = col["pos"], col = NA)),
neg = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = col["neg"], col = NA)),
low = function(x, y, w, h)
grid.rect(x, y, w*1, h*1, gp = gpar(fill = col["low"], col = NA)))
## Set Cancer Status
data_samples$cancer_status <- factor(data_samples$cancer_status, levels = c("Healthy", "positive", "negative", "remission"),
labels = c("Healthy", "Positive", "Negative", "Remission"))
data_cancer <- as.matrix(data_samples$cancer_status)
row.names(data_cancer) <- data_samples$TGL_ID
## Set Cancer Type
data_samples$cancer_type <- factor(data_samples$cancer_type, levels = c("breast", "prostate", "sarcoma", "ewing_sarcoma",
"osteosarcoma", "adrenocortical", "astrocytoma",
"phylloides", "bladder", ""),
labels = c("Breast", "Prostate", "Sarcoma", "Ewing Sarcoma",
"Osteosarcoma", "Adrenocortical", "Astrocytoma",
"Phylloides Tumour", "Bladder", "Negative"))
data_type <- as.matrix(data_samples$cancer_type)
row.names(data_type) <- data_samples$TGL_ID
## Set ichorCNA
data_ichor <- data_ichor[data_ichor$TGL_ID %in% data_samples$TGL_ID, ]
row.names(data_ichor) <- data_ichor$TGL_ID
data_ichor <- data_ichor[data_samples$TGL_ID, ]
row.names(data_ichor) <- data_samples$TGL_ID
data_ichor[is.na(data_ichor)] <- 0
data_ichor <- as.matrix(data_ichor$TF)
row.names(data_ichor) <- data_samples$TGL_ID
## Set Patient Age
data_samples$Age <- factor(data_samples$Age, levels = c("adult", "pediatric"),
labels = c("Adult", "Pediatric"))
data_age <- as.matrix(data_samples$Age)
data_samples[data_samples == ""] <- "Adult"
row.names(data_age) <- data_samples$TGL_ID
## Set Somatic Mutations
data_samples[data_samples$somatic == ""] <- "NA"
data_samples$somatic <- factor(data_samples$somatic, levels = c("Y", "N", "NS", "NA"),
labels = c("Positive", "Negative", "Not Sequenced", "NA"))
data_somatic <- as.matrix(data_samples$somatic)
row.names(data_somatic) <- data_samples$TGL_ID
## Set Annotations
left_annotation <- rowAnnotation("Cancer Status" = data_cancer,
"Cancer Type" = data_type,
"Somatic" = data_somatic,
"Patient" = data_age,
show_annotation_name = TRUE,
border = TRUE,
col = list("Cancer Status" = col_cancer,
"Cancer Type" = col_type,
"Somatic" = col_somatic,
"Patient" = col_age),
annotation_name_side = "top",
annotation_name_rot = 90,
width = unit(1, "cm"),
annotation_legend_param = list("Cancer Status" = list(direction = "horizontal",
nrow = 1,
border = "black"),
"Cancer Type" = list(direction = "horizontal",
nrow = 1,
border = "black"),
"Somatic" = list(direction = "horizontal",
nrow = 1,
border = "black"),
"Patient" = list(direction = "horizontal",
nrow = 1,
border = "black")))
right_annotation <- rowAnnotation("% Genome" = anno_barplot(data_sum,
axis_param = list(labels_rot = 0,
side = "top"),
annotation_label_side = "top",
width = unit(1.5, "cm"),
gp = gpar(fill = "#fb9a99")),
annotation_name_side = "top",
annotation_name_rot = 90)
bottom_annotation <- HeatmapAnnotation("Frequency" = data_freq,
" " = anno_mark(at = c(452),
labels = c("TP53"),
which = "column",
side = "bottom",
labels_rot = 45,
padding = unit(5, "mm")),
col = list("Frequency" = col_freq),
border = TRUE,
annotation_name_side = "left",
annotation_legend_param = list("Frequency" = list(direction = "horizontal",
border = "black")))
## Set legend labels
heatmap_legend_param = list(title = "SD from mean",
border = TRUE,
at = c("pos"),
labels = c("> 3"),
direction = "horizontal",
nrow = 1)
## Set order
sample_order <- row.names(data_samples)
chr_order <- colnames(data_ratio)
column_split <- data_chr$arm
row_split <- data_cancer
## Generate oncopring
pdf("Fragment ratio.pdf", height = 8, width = 16)
oncoPrint <- oncoPrint(data_ratio,
alter_fun = alter_fun,
col = col,
show_row_names = FALSE, pct_side = "none",
heatmap_legend_param = heatmap_legend_param,
top_annotation = NULL,
bottom_annotation = bottom_annotation,
left_annotation = left_annotation,
right_annotation = right_annotation,
row_order = sample_order,
column_order = chr_order,
row_labels = NULL,
column_split = column_split,
row_split = row_split,
row_title_rot = 0,
border = TRUE,
border_gp = gpar(col = "black"))
draw(oncoPrint, heatmap_legend_side = "bottom", merge_legend = TRUE)
dev.off()
View(data_ratio)
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_ratio/Fragment ratio.R')
oncoPrint <- oncoPrint(data_ratio,
alter_fun = alter_fun,
col = col,
show_row_names = FALSE, pct_side = "none",
heatmap_legend_param = heatmap_legend_param,
top_annotation = NULL,
bottom_annotation = bottom_annotation,
left_annotation = left_annotation,
right_annotation = right_annotation,
row_order = sample_order,
column_order = chr_order,
row_labels = NULL,
column_split = column_split,
row_split = row_split,
row_title_rot = 0,
border = TRUE,
border_gp = gpar(col = "black"))
draw(oncoPrint, heatmap_legend_side = "bottom", merge_legend = TRUE)
View(data_ratio)
View(data_somatic)
## Generate oncopring
pdf("Fragment ratio.pdf", height = 8, width = 16)
oncoPrint <- oncoPrint(data_ratio,
alter_fun = alter_fun,
col = col,
show_row_names = FALSE, pct_side = "none",
heatmap_legend_param = heatmap_legend_param,
top_annotation = NULL,
bottom_annotation = bottom_annotation,
left_annotation = left_annotation,
right_annotation = right_annotation,
row_order = sample_order,
column_order = chr_order,
row_labels = NULL,
column_split = column_split,
row_split = row_split,
row_title_rot = 0,
border = TRUE,
border_gp = gpar(col = "black"))
draw(oncoPrint, heatmap_legend_side = "bottom", merge_legend = TRUE)
dev.off()
setwd("/Users/derekwong/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_ratio")
data_ratio <- read.table("CHARM_LFS_fragment_ratios.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_healthy <- read.table("NF1_healthy_plasmas_dist.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_samples <- read.table("sample_list.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_ichor <- read.table("CHARM_LFS_ichorCNA.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
data_ratio <- data_ratio %>% right_join(data_healthy, by=c("seqnames", "arm", "start", "end"))
View(data_ratio)
View(data_healthy)
# Set working variables
path <- "/Users/derekwong/Desktop/H4H/projects/NF1_MPNST_sWGS/fragmentomics/healthy_controls/dist"
outdir <- "/Users/derekwong/OneDrive - UHN/Post-Doc/PN_MPNST_sWGS_Project/healthy_controls"
project <- "NF1_healthy"
filenames <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
samples <- list.files(path = path, pattern = "*.txt", full.names = FALSE)
samples <- sub("_realigned.*", "", samples)
# Merge data
rows <- filenames[1]
rows <- read.delim(rows, header = TRUE)
rows <- rows[, 2:5]
# Merge fragment frequencies
datalist <- lapply(filenames, function(x){read.delim(file = x, header = TRUE)[,9]})
data <- do.call(cbind, datalist)
data <- as.data.frame(data)
colnames(data) <- samples
# Set working variables
path <- "/Users/derekwong/Desktop/H4H/projects/NF1_MPNST_sWGS/fragmentomics/healthy_controls/dist"
outdir <- "/Users/derekwong/OneDrive - UHN/Post-Doc/PN_MPNST_sWGS_Project/healthy_controls"
project <- "NF1_healthy"
filenames <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
samples <- list.files(path = path, pattern = "*.txt", full.names = FALSE)
samples <- sub("_realigned.*", "", samples)
# Merge data
rows <- filenames[1]
rows <- read.delim(rows, header = TRUE)
rows <- rows[, 2:5]
# Merge fragment frequencies
datalist <- lapply(filenames, function(x){read.delim(file = x, header = TRUE)[,9]})
# Merge data
rows <- filenames[1]
rows <- read.delim(rows, header = TRUE)
View(rows)
rows <- rows[, 2:5]
# Merge fragment frequencies
datalist <- lapply(filenames, function(x){read.delim(file = x, header = TRUE)[,9]})
filenames
filenames <- list.files(path = path, pattern = "*dist.txt", full.names = TRUE)
# Merge fragment frequencies
datalist <- lapply(filenames, function(x){read.delim(file = x, header = TRUE)[, 9]})
data <- do.call(cbind, datalist)
data <- as.data.frame(data)
colnames(data) <- samples
samples <- list.files(path = path, pattern = "*.txt", full.names = FALSE)
samples <- sub("_realigned.*", "", samples)
samples <- list.files(path = path, pattern = "*dist.txt", full.names = FALSE)
samples <- sub("_realigned.*", "", samples)
colnames(data) <- samples
data <- cbind(rows, data)
write.table(data, file.path(outdir, paste0(project, "_fragment_ratios.txt")), row.names = FALSE, sep = "\t")
source('~/Google Drive/Post-Doc/CHARM/LFS/Figures/Fragment_ratio/Fragment ratio.R')
data_freq
data_freq > 0.25
table(data_freq > 0.25)
View(data_ratio)
oncoPrint <- oncoPrint(data_ratio,
alter_fun = alter_fun,
col = col,
show_row_names = FALSE, pct_side = "none",
heatmap_legend_param = heatmap_legend_param,
top_annotation = NULL,
bottom_annotation = bottom_annotation,
left_annotation = left_annotation,
right_annotation = right_annotation,
#row_order = sample_order,
column_order = chr_order,
row_labels = NULL,
column_split = column_split,
row_split = row_split,
row_title_rot = 0,
border = TRUE,
border_gp = gpar(col = "black"))
draw(oncoPrint, heatmap_legend_side = "bottom", merge_legend = TRUE)
## Generate oncopring
pdf("Fragment ratio.pdf", height = 8, width = 16)
oncoPrint <- oncoPrint(data_ratio,
alter_fun = alter_fun,
col = col,
show_row_names = FALSE, pct_side = "none",
heatmap_legend_param = heatmap_legend_param,
top_annotation = NULL,
bottom_annotation = bottom_annotation,
left_annotation = left_annotation,
right_annotation = right_annotation,
#row_order = sample_order,
column_order = chr_order,
row_labels = NULL,
column_split = column_split,
row_split = row_split,
row_title_rot = 0,
border = TRUE,
border_gp = gpar(col = "black"))
draw(oncoPrint, heatmap_legend_side = "bottom", merge_legend = TRUE)
dev.off()
## Generate oncopring
pdf("Fragment ratio.pdf", height = 8, width = 16)
oncoPrint <- oncoPrint(data_ratio,
alter_fun = alter_fun,
col = col,
show_row_names = FALSE, pct_side = "none",
heatmap_legend_param = heatmap_legend_param,
top_annotation = NULL,
bottom_annotation = bottom_annotation,
left_annotation = left_annotation,
right_annotation = right_annotation,
#row_order = sample_order,
column_order = chr_order,
row_labels = NULL,
column_split = column_split,
row_split = row_split,
row_title_rot = 0,
border = TRUE,
border_gp = gpar(col = "black"))
draw(oncoPrint, heatmap_legend_side = "bottom", merge_legend = TRUE)
dev.off()
